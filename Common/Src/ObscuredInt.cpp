//! \file		ObscuredInt.cpp
//! \brief
//! \detail
//! \author		sehyun


#include "ObscuredInt.h"

#include <random>


namespace ObscuredTypes
{
	int	ObscuredInt::CryptoKey = 827340;

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	ObscuredInt::ObscuredInt(int Value)
		: CurrentCryptoKey(CryptoKey), Inited(true)
	{
		HiddenValue = Encrypt(Value, CurrentCryptoKey);
	}

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	void	ObscuredInt::ApplyNewCryptoKey()
	{
		if (CurrentCryptoKey != CryptoKey)
		{
			HiddenValue = Encrypt(InternalDecrypt(), CryptoKey);
			CurrentCryptoKey = CryptoKey;
		}
	}
	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	void	ObscuredInt::RandomizeCryptoKey()
	{
		HiddenValue = InternalDecrypt();
		CurrentCryptoKey = rand();
		HiddenValue = Encrypt(HiddenValue, CurrentCryptoKey);
	}

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	int		ObscuredInt::GetEncrypted()
	{
		ApplyNewCryptoKey();
		return HiddenValue;
	}

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	void	ObscuredInt::SetEncrypted(int Encrypted)
	{
		Inited = true;
		HiddenValue = Encrypted;
	}

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	int		ObscuredInt::Encrypt(int Value, int Key)
	{
		if (0 == Key)
			return Value ^ CryptoKey;
		return Value ^ Key;
	}

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	int		ObscuredInt::Decrypt(int Value, int Key)
	{
		if (0 == Key)
			return Value ^ CryptoKey;
		return Value ^ Key;
	}

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	int		ObscuredInt::InternalDecrypt()
	{
		if (!Inited)
		{
			CurrentCryptoKey = CryptoKey;
			HiddenValue = Encrypt(0);
			Inited = true;
		}

		return Decrypt(HiddenValue, CurrentCryptoKey);
	}

#pragma region Operators
	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	ObscuredInt		ObscuredInt::operator ++()
	{
		int decrypted = InternalDecrypt() + 1;
		HiddenValue = Encrypt(decrypted, CurrentCryptoKey);

		return *this;
	}

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	ObscuredInt		ObscuredInt::operator--()
	{
		int decrypted = InternalDecrypt() - 1;
		HiddenValue = Encrypt(decrypted, CurrentCryptoKey);

		return *this;
	}

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	bool	ObscuredInt::operator ==(ObscuredInt& Value)
	{
		if (CurrentCryptoKey == Value.CurrentCryptoKey)
			return (HiddenValue == Value.HiddenValue);

		return (Decrypt(HiddenValue, CurrentCryptoKey) == Decrypt(Value.HiddenValue, Value.CurrentCryptoKey));
	}

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	bool	ObscuredInt::operator ==(int Value)
	{
		return (InternalDecrypt() == Value);
	}

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	bool	ObscuredInt::operator !=(ObscuredInt& Value)
	{
		if (CurrentCryptoKey == Value.CurrentCryptoKey)
			return (HiddenValue != Value.HiddenValue);

		return (Decrypt(HiddenValue, CurrentCryptoKey) != Decrypt(Value.HiddenValue, Value.CurrentCryptoKey));
	}

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	bool	ObscuredInt::operator!=(int Value)
	{
		return (InternalDecrypt() != Value);
	}

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	int		ObscuredInt::operator =(ObscuredInt& Value)
	{
		return Value.InternalDecrypt();
	}

	//////////////////////////////////////////////////////////////////
	///
	//////////////////////////////////////////////////////////////////
	ObscuredInt		ObscuredInt::operator =(int Value)
	{
		HiddenValue = Encrypt(Value);

		return *this;
	}


#pragma endregion
}